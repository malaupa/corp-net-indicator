// Code generated by dbus-codegen-go DO NOT EDIT.
package vpn

import (
	"context"
	"errors"
	"fmt"
	"github.com/godbus/dbus/v5"
	"github.com/godbus/dbus/v5/introspect"
)

var (
	// Introspection for de.telekomMMS.vpn
	IntrospectDataVpn = introspect.Interface{
		Name: "de.telekomMMS.vpn",
		Methods: []introspect.Method{{Name: "GetStatus", Args: []introspect.Arg{
			{Name: "status", Type: "a{sv}", Direction: "out"},
		}},
			{Name: "Connect", Args: []introspect.Arg{
				{Name: "password", Type: "s", Direction: "in"},
				{Name: "server", Type: "s", Direction: "in"},
			}},
			{Name: "Disconnect", Args: []introspect.Arg{}},
			{Name: "ListServers", Args: []introspect.Arg{
				{Name: "servers", Type: "as", Direction: "out"},
			}},
		},
		Signals: []introspect.Signal{{Name: "StatusChange", Args: []introspect.Arg{
			{Name: "status", Type: "a{sv}", Direction: "out"},
		}},
		},
		Properties:  []introspect.Property{},
		Annotations: []introspect.Annotation{},
	}
)

// Signal is a common interface for all signals.
type Signal interface {
	Name() string
	Interface() string
	Sender() string

	path() dbus.ObjectPath
	values() []interface{}
}

// ErrUnknownSignal is returned by LookupSignal when a signal cannot be resolved.
var ErrUnknownSignal = errors.New("unknown signal")

// LookupSignal converts the given raw D-Bus signal with variable body
// into one with typed structured body or returns ErrUnknownSignal error.
func LookupSignal(signal *dbus.Signal) (Signal, error) {
	switch signal.Name {
	case InterfaceVpn + "." + "StatusChange":
		v0, ok := signal.Body[0].(map[string]dbus.Variant)
		if !ok {
			return nil, fmt.Errorf("prop .Status is %T, not map[string]dbus.Variant", signal.Body[0])
		}
		return &VpnStatusChangeSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &VpnStatusChangeSignalBody{
				Status: v0,
			},
		}, nil
	default:
		return nil, ErrUnknownSignal
	}
}

// AddMatchSignal registers a match rule for the given signal,
// opts are appended to the automatically generated signal's rules.
func AddMatchSignal(conn *dbus.Conn, s Signal, opts ...dbus.MatchOption) error {
	return conn.AddMatchSignal(append([]dbus.MatchOption{
		dbus.WithMatchInterface(s.Interface()),
		dbus.WithMatchMember(s.Name()),
	}, opts...)...)
}

// RemoveMatchSignal unregisters the previously registered subscription.
func RemoveMatchSignal(conn *dbus.Conn, s Signal, opts ...dbus.MatchOption) error {
	return conn.RemoveMatchSignal(append([]dbus.MatchOption{
		dbus.WithMatchInterface(s.Interface()),
		dbus.WithMatchMember(s.Name()),
	}, opts...)...)
}

// Interface name constants.
const (
	InterfaceVpn = "de.telekomMMS.vpn"
)

// NewVpn creates and allocates de.telekomMMS.vpn.
func NewVpn(object dbus.BusObject) *Vpn {
	return &Vpn{object}
}

// Vpn implements de.telekomMMS.vpn D-Bus interface.
type Vpn struct {
	object dbus.BusObject
}

// GetStatus calls de.telekomMMS.vpn.GetStatus method.
func (o *Vpn) GetStatus(ctx context.Context) (status map[string]dbus.Variant, err error) {
	err = o.object.CallWithContext(ctx, InterfaceVpn+".GetStatus", 0).Store(&status)
	return
}

// Connect calls de.telekomMMS.vpn.Connect method.
func (o *Vpn) Connect(ctx context.Context, password string, server string) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceVpn+".Connect", 0, password, server).Store()
	return
}

// Disconnect calls de.telekomMMS.vpn.Disconnect method.
func (o *Vpn) Disconnect(ctx context.Context) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceVpn+".Disconnect", 0).Store()
	return
}

// ListServers calls de.telekomMMS.vpn.ListServers method.
func (o *Vpn) ListServers(ctx context.Context) (servers []string, err error) {
	err = o.object.CallWithContext(ctx, InterfaceVpn+".ListServers", 0).Store(&servers)
	return
}

// VpnStatusChangeSignal represents de.telekomMMS.vpn.StatusChange signal.
type VpnStatusChangeSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *VpnStatusChangeSignalBody
}

// Name returns the signal's name.
func (s *VpnStatusChangeSignal) Name() string {
	return "StatusChange"
}

// Interface returns the signal's interface.
func (s *VpnStatusChangeSignal) Interface() string {
	return InterfaceVpn
}

// Sender returns the signal's sender unique name.
func (s *VpnStatusChangeSignal) Sender() string {
	return s.sender
}

func (s *VpnStatusChangeSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *VpnStatusChangeSignal) values() []interface{} {
	return []interface{}{s.Body.Status}
}

// VpnStatusChangeSignalBody is body container.
type VpnStatusChangeSignalBody struct {
	Status map[string]dbus.Variant
}
