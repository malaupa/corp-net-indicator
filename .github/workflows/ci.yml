name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: stable

      - name: Lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          # https://github.com/golangci/golangci-lint-action/issues/135
          skip-pkg-cache: true
  test:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: stable

      - name: Install xvfb, upx and gtk
        run: sudo apt-get update && sudo apt-get install upx-ucl libgtk-4-dev  libglib2.0-dev xvfb -y

      - name: Run test
        run: xvfb-run -a go test -v -timeout 60m -coverprofile cover.out ./... | tee test.out && exit ${PIPESTATUS[0]}

      - name: Process results
        if: always()
        run: |+
          go tool cover -html cover.out -o coverage.html
          awk -v workspace="$GITHUB_WORKSPACE" -v baseUrl="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/blob/$GITHUB_REF_NAME" '
            BEGIN {
              printf("## Test Result\n\n")
              details = "<details>\n<summary>Test Details</summary>\n\n"
              # workspace = sub(/\//, "\/", workspace)
              pattern = workspace"(.+):([0-9]+)$"
            }
            $1 ~ /===/ { 
              count++
              errorLink = ""
              error = ""
              errorSummary = ""
              next
            }
            $1 ~ /---/ { 
              if ( $2 ~ /FAIL:/ ) { 
                failed++ 
                details = sprintf("%s:red_circle: %s %s\n", details, $3, $4)
                details = sprintf("%s<details>\n<summary>Log</summary>\n\n%s\n\n</details>\n\n", details, errorSummary)
              }
              if ( $2 ~ /SKIP:/) {
                skipped++
                details = sprintf("%s:white_circle: %s\n", details, $3)
              }
              if ( $2 ~ /PASS:/) {
                details = sprintf("%s:green_circle: %s %s\n", details, $3, $4)
              }
              next
            } 
            $1 ~ /Test:/ {
              error = error$0"\n"
              errorSummary = sprintf("%s%s</br>```%s```</br>", errorSummary, errorLink, error)
              errorLink = ""
              error = ""
              next
            }
            { 
              if(match($0,pattern,e)) {
                errorLink = sprintf("[%s:%s](%s%s#L%s)", e[1], e[2], baseUrl, e[1], e[2])
              }
              error = error$0"\n" 
            }
            END { 
              if (failed > 0) {
                printf(":broken_heart: %d Test(s) failed of %d Tests\n\n", failed, count)
              } else {
                printf(":raised_hands: %d Tests pass\n\n", count)
              }
              details = details"\n</details>\n\n"
              print(details)
            }' test.out >> $GITHUB_STEP_SUMMARY
          awk -v baseUrl="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/blob/$GITHUB_REF_NAME" '
            function bar(cov) {
              if (cov >= 95) {
                  return ":green_square::green_square::green_square::green_square:"
                } else if (cov >= 75) {
                  return ":green_square::green_square::green_square::red_square:"
                } else if (cov >= 50) {
                  return ":green_square::green_square::red_square::red_square:"
                } else if (cov >= 25) {
                  return ":green_square::red_square::red_square::red_square:"
                } else {
                  return ":red_square::red_square::red_square::red_square:"
                }
            }
            BEGIN {
              printf("## Coverage\n\n")
              details = "<details>\n<summary>Coverage Details</summary>\n\n"
              details = details"|Coverage|File|Uncovered Lines|\n"
              details = details"|-|-|-|\n"
              file = ""
            }
            $1 !~ /mode:/ {
              if (match($1,/^[^/]+([^:]+):([0-9]+).[0-9]+,([0-9]+).[0-9]+/,f)) {
                if (file != "" && file != f[1] ) {
                  fileCoverage = fileCovered/fileStatements*100
                  if (lineStart != "" && lineEnd != "") {
                    uncoveredLines = sprintf("%s[%s-%s](%s%s#L%s-L%s)", uncoveredLines, lineStart, lineEnd, baseUrl, file,  lineStart, lineEnd)
                  }
                  details = sprintf("%s|%s %.1f%|%s|%s|\n", details, bar(fileCoverage), fileCoverage, file, uncoveredLines)
                  fileCovered = 0
                  fileStatements = 0
                  uncoveredLines = ""
                  lineStart = ""
                  lineEnd = ""
                } 
                file = f[1]
                statements += $2
                fileStatements += $2
                if ($3 != "0") {
                  covered += $2
                  fileCovered += $2
                  next
                } 
                if (lineStart == "" && lineEnd == "") {
                  lineStart = f[2]
                  lineEnd = f[3]
                  next
                }
                if (lineEnd+0 == f[2]+0 || lineEnd+1 == f[2]+0) {
                  lineEnd = f[3]
                  next
                } 
                uncoveredLines = sprintf("%s[%s-%s](%s%s#L%s-L%s), ", uncoveredLines, lineStart, lineEnd, baseUrl, file,  lineStart, lineEnd)
                lineStart = f[2]
                lineEnd = f[3]
              }
            }
            END {
              total = covered/statements*100
              printf("Total coverage: %s %.1f%\n", bar(total), total)
              details = details"\n</details>\n\n"
              print(details)
            }' cover.out >> $GITHUB_STEP_SUMMARY
          exit $TEST_RESULT
      - name: Archive code coverage results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: coverage.html
          retention-days: 5
  # build:
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Setup Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: stable

  #     - name: Install xvfb, upx and gtk
  #       run: sudo apt-get update && sudo apt-get install upx-ucl libgtk-4-dev  libglib2.0-dev xvfb -y

  #     - name: Build
  #       uses: goreleaser/goreleaser-action@v4
  #       with:
  #         distribution: goreleaser
  #         version: latest
  #         args: build --snapshot --clean --timeout 60m
# yaml-language-server: $schema=https://raw.githubusercontent.com/SchemaStore/schemastore/master/src/schemas/json/github-workflow.json
